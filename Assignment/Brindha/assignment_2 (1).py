# -*- coding: utf-8 -*-
"""Assignment-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YtR7LTut5P9pL6j50zdvHzGMBrUh6pbc

Importing the Libraries
"""

import pandas as pd

"""Loading the Dataset"""

df=pd.read_csv("/Churn_Modelling.csv.csv") 
df.head(5)

"""Perform Univariate Analysis

There are three common ways to perform univariate analysis on one variable:

1. Summary statistics – Measures the center and spread of values.

2. Frequency table – Describes how often different values occur.

3. Charts – Used to visualize the distribution of values.

Summary statistics

  1.Mean

  2.Median
  
  3.Std
"""

df['EstimatedSalary'].mean()

df['Balance'].median()

df['EstimatedSalary'].std()

"""Frequency table

1.value_counts
"""

df['EstimatedSalary'].value_counts()

"""Create Charts

  1.Box plots

  2.Histogram

  3.Density curve
"""

import matplotlib.pyplot as plt

df.boxplot(column=['EstimatedSalary'], grid=False, color='black')

import matplotlib.pyplot as plt

df.hist(column='EstimatedSalary', grid=False, edgecolor='black')

import seaborn as sns

sns.kdeplot(df['EstimatedSalary'])

"""Bi - Variate Analysis

There are three common ways to perform bivariate analysis:

1. Scatterplots

2. Correlation Coefficients

3. Simple Linear Regression

Scatterplots
"""

import matplotlib.pyplot as plt

plt.scatter(df.EstimatedSalary,df.Balance)
plt.title('EstimatedSalary vs Balance')
plt.xlabel('EstimatedSalary')
plt.ylabel('Balance')

"""Correlation Coefficients"""

df.corr()

"""Simple Linear Regression"""

import statsmodels.api as sm

#define response variable
y = df['CreditScore']

#define explanatory variable
x = df[['Balance']]

#add constant to predictor variables
x = sm.add_constant(x)

#fit linear regression model
model = sm.OLS(y, x).fit()

#view model summary
print(model.summary())

"""Multi - Variate Analysis

Profile Plot
"""

ax = df[["Balance","CreditScore","EstimatedSalary"]].plot(figsize=(20,15))
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5));

"""Perform descriptive statistics on the dataset."""

df['EstimatedSalary'].mean()

df['EstimatedSalary'].mode()

df['EstimatedSalary'].std()

df['EstimatedSalary'].skew()

"""Handle the Missing values"""

print(df.isnull().sum())

"""Find the outliers and replace the outliers

Outliers Identification

Visualization

       Boxplot

       Histogram 


Skewness


Interquartile Range


Standard Deviation

Visualization

       Boxplot

       Histogram
"""

sns.boxplot(df['EstimatedSalary'],data=df)

df['EstimatedSalary'].hist()

"""Skewness"""

print('skewness value of CreditScore: ',df['CreditScore'].skew())
print('skewness value of Balance: ',df['Balance'].skew())

"""Interquartile Range(IQR)"""

df['EstimatedSalary'].quantile(0.25)
df['EstimatedSalary'].quantile(0.75)
Q3-Q1

"""Standard Deviation"""

df['EstimatedSalary'].std()

"""Check for Categorical columns and perform encoding."""

pd.get_dummies(df, columns=["EstimatedSalary"]).head()

"""Split the data into dependent and independent variables."""

X = df.iloc[:, :-1].values
print(X)

Y = df.iloc[:, -1].values
print(Y)

"""Scale the independent variables

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(EstimatedSalary)

Split the data into training and testing
"""

from sklearn.tree import DecisionTreeRegressor
reg = DecisionTreeRegressor(max_depth = 2, random_state = 0)

reg.fit(X_train, y_train)

reg.predict(X_test[0:10])

X_test.head(1)

reg.predict(X_test.iloc[0].values.reshape(1,-1))